lib_CALLBACK.ahk
  - Callback.event()
  - Callback.__new(options = "", paramCount = "", id = "")
  - Callback.__delete()

lib_CONTROL.ahk
  - Control.__Get(aname)
  - Control.__New(hwnd, ClassNN = "")
  - Control.getDescription( aname = "")
  - Control.getPos()
  - Control.getText()
  - Control.getOtherProperty(aname)

lib_CORE.ahk
  - Core.swap(arr)
  - Core.firstValid( a* )
  - Core.in( arr, val )
  - Core.cpu()
  - Core.keys(arr)

lib_EVENTDISPATCHER.ahk
  - EventDispatcher.registerGui(w)
  - EventDispatcher.toggleHotkeys(w, to = "Toggle")
  - EventDispatcher.unregisterGui(w)
  - EventDispatcher.event()

lib_FILE.ahk
  - File.__new(file, flags, encoding = "")
  - File.__call(aname, params*)
  - File.__new()
  - File.__new()

lib_G.ahk
  - g.__Get(aname)
  - g.controlSet( c, subcommand = "", param3 = "" )
  - g.controlGet( c, subcommand = "", param4 = "" )
  - g.close()
  - g.show()
  - g.hide()
  - g.escape()
  - g.size()

lib_JSON.ahk
  - JSONParser.__New(jsParserPath)
  - JSONParser.fromFile( path, reviver="" )
  - JSONParser.parse(jsonString, reviver="" )
  - JSONParser.stringify(val, spacer = " ", precIndent = 0)
  - JSONParser.quote(val)
  - JSONParser.convert(j)
  - JSONParser.__Delete()
  - JSONParser.save( byref value, filename, replacer="", space=4)

lib_LISTBOX.ahk
  - ListBox.__new(hwnd)
  - ListBox.selectAll()
  - ListBox.deselectAll()
  - ListBox.select( i = 1)
  - ListBox.choose( c )
  - ListBox.set( e )
  - ListBox.get()

lib_LOG.ahk
  - Log.write( s, kind = "info", f = "" )
  - Log.warn(s, f = "")
  - Log.info(s, f = "")
  - Log.error(s, f = "")

lib_MATH.ahk
  - Math.xor(a, b)
  - Math.min(x,y = "")
  - Math.max(x,y = "")
  - Math.minObj(x)
  - Math.maxObj(x)
  - Math.between(x,y,z)
  - Math.changeBase(n, b = 10)
  - Math.hex(n)
  - Math.oct(n)
  - Math.fromHex(n)

lib_ODBC.ahk
  - Query.__new(conn, text)
  - Query.__delete()
  - Query.do(q)
  - Query.__new( settings = "" )
  - Query.__delete()
  - Query.connect()
  - Query.loadFromRegistry()
  - Query.loadDsn(dsn)
  - Query.load()
  - Query.loadDsnList()
  - Query.save( dsn, uid, pwd, defaultDsn = 0, defaultOwner = 0)

lib_STRING.ahk
  - String.is(type)
  - String.in( hs )
  - String.split(delimiters, omitchars = "")
  - String.right(n)
  - String.left(n)
  - String.lefttrim(n)
  - String.rightTrim(n)
  - String.slice(start=1, end=0)
  - String.match(regexp, options = "O")
  - String.fill(times = 1)
  - String.join(arr)
  - String.q( left="'", right="" )
  - String.qq()
  - String.qa()
  - String.qb()
  - String.qc()
  - String.toUpper()
  - String.toLower()
  - String.fmt(args*)
  - String.parse(s)
  - String.match("^%%")

lib_SYNK.ahk
  - SYNK_filecompare(fsource, fdest)
  - SYNK_error(err, errText, byRef e)
  - SYNK_countfilesizes(source)
  - SYNK_dirsynk(source, dest, bak, move = 0, prog = 600, moveExceedings = 0, dateBak = 1, compare = "SYNK_filecompare")
  - SYNK_error(ErrorLevel, "Impossibile creare la directory di backup`n" bak, e)
  - SYNK_error(ErrorLevel, "Errore nello spostamento`nda: " fdest "`na: " fbak, e)
  - SYNK_error(ErrorLevel, A_LastError, e)
  - SYNK_error(ErrorLevel, "Errore nella copia del file`nda: " fsource "`na: " fdest, e)
  - SYNK_error(ErrorLevel, "Errore nel leggere le dimesioni di`n" fsource, e)
  - SYNK_stub()

lib_TRAYTIP.ahk
  - TrayTip.show( s, t=1000 )
  - TrayTip.clear()

lib_WINDOW.ahk
  - Window.geomToString( o )
  - Window.__New(hwnd)
  - Window.__Get(aname)
  - Window.getControls()
  - Window.split("`n")
  - Window.getPos()
  - Window.setPos( x = "", y = "", w = "", h = "" )

